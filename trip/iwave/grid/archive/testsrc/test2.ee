#include "usempi.h"
#include "parserpp.hh"
#include "except.hh"

using RVL::parse;
using RVL::RVLException;

int main(int argc, char ** argv) {

  int rk=0;

#ifdef IWAVE_USE_MPI
  MPI_Init(&argc,&argv);
  MPI_Comm_rank(MPI_COMM_WORLD,&rk);
#endif 

  try {

    if (rk==0) {

      cout<<"GRIDPP Unit Test 2"<<endl;
      cout<<"test of parser template"<<endl;
      PARARRAY * par = ps_new();
      
      FILE * fp = fopen("testsrc/test2/test.par","w");
      fprintf(fp,"remark = hello_there");
      fflush(fp);
      fclose(fp);
      
      ps_createfile(par,"testsrc/test2/test.par");
      
      string key1="remark";
      string key2="stuff";
      string val1;
      string val2;
      int ret1  = parse<string>(*par,key1,val1);
      int ret2  = parse<string>(*par,key2,val2);
      cout<<"parse, key="<<key1<<" val="<<val1<<" ret="<<ret1<<endl;  
      cout<<"should be key=remark val=hello_there ret=1"<<endl;
      cout<<"parse, key="<<key2<<" val="<<val2<<" ret="<<ret2<<endl;
      cout<<"should be key=stuff val= ret=0"<<endl<<endl;
      cout<<"(note: the return values are really boolean, and answer the"<<endl;
      cout<<"question: was the query on the key successful?)"<<endl;
      
      ps_delete(&par);
    }
#ifdef IWAVE_USE_MPI
    MPI_Finalize();
#endif

    return(0);

  }
  catch (RVLException & e) {
    e.write(cerr);
#ifdef IWAVE_USE_MPI
    MPI_Abort(MPI_COMM_WORLD,0);
#endif
    exit(1);
  }

}
