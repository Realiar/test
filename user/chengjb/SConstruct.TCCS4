import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
vti2dpseudop vti2dpseudop1 vti2dpseudopfvs0
vti2delastic 
tti2dpseudop tti2dpseudop1
tti2delastic
ort3dpseudop
ort3dhomodevK ort3dhomodevX
ort3dhomodevcK ort3dhomodevcX
datasucjb2rsf2d datasucjb2rsf3d datasucjb2rsf3dnh
'''

ccprogs = '''
vti2dpseudoplr vti2delasticlr
'''

pyprogs ='''
'''

pymods = '''
'''

tprogs = '''
fftw
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

objs = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
    objs.append(obj)
        
libs = [env.get('DYNLIB','')+'rsf','lapack']+env.get('LIBS',[])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    libs.insert(0,fftw)

##############################################################################
# Compiling C programs
##############################################################################
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,map(lambda x: x + '.o',sources),LIBS=libs)
    if root:
        env.Install(bindir,prog)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']+lapack+libs

##############################################################################
# Compiling C++ programs
##############################################################################
ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources)+objs,LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

##############################################################################
# Compiling C programs (Test)
##############################################################################
for prog in Split(tprogs):
        sources = ['T'+prog]
        bldutil.depends(env,sources,'T'+prog)
        env.StaticObject('T'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources),LIBS=libs,PROGPREFIX='T',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
