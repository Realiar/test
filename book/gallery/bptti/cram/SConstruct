from rsf.proj import *
from math import pi

par = {
    'nz':901,  'dz':0.0125, 'oz':0.0,  # Depth
    'nx':6298, 'dx':0.0125, 'ox':0.0,  # Lateral
    'smz':13, 'smx':13,                # Smoothing radius for slowness
    'na':360,                          # Number of take-off angles
    'oazmin':90,'oazmax':50,           # Opening angle mute
    'dazmin':120,'dazmax':80,          # Dip angle mute
    'ts':4,'th':6,                     # Tapering in traces (shot, receiver axes)
    'smax':1.0,'hmax':1.0,             # Escape tables filter
# Screen params for the model
    'scrpar':'''screenratio=0.56 screenht=8.0
                yll=2.0 xll=1.5 crowd=0.8 labelsz=6
                o2num=0.0 d2num=2.0 n2tic=6
                barmove=y tickscale=0.3
                barwidth=0.2 label2= unit2=''',
# Screen params for CIGs
    'scrpar2':'''yreverse=y wanttitle=n wherexlabel=top
                 transp=y poly=y plotcol=7 gridcol=8
                 screenht=10 screenratio=1.25
                 unit2="\F16 \^g\_\F-1 "'''}

# Prepare model
###############

tgz = 'ModelParams.tar.gz'
#Fetch(tgz,'BP',top=os.environ.get('DATAPATH'),server='local')

zcat = WhereIs('gzcat') or WhereIs('zcat')

mdlparts = ['epsilon','delta','vp','theta']
sgy = {}
for part in mdlparts:
    sgy[part] = os.path.join('ModelParams',part.capitalize() + '_Model.sgy')
Flow(sgy.values(),tgz,
     zcat + ' $SOURCE | tar -xvf -',stdin=0,stdout=-1)
for part in mdlparts:
    if part == 'vp':
        Flow([part,part+'.asc',part+'.bin'],sgy[part],'''
             segyread hfile=${TARGETS[1]} bfile=${TARGETS[2]} read=d |
             put o2=0.0 d2=0.00625 label2=Distance unit2=km
                 o1=0.0 d1=0.00625 label1=Depth unit1=km
                 label="Vertical velocity" unit=km/s |
             scale dscale=0.001 | math output="1.0/input" |
             smooth rect1=%(smz)d rect2=%(smz)d repeat=2 |
             math output="1.0/input" |
             window j1=2 j2=2
             ''' % par)
    else:
        Flow([part,part+'.asc',part+'.bin'],sgy[part],'''
             segyread hfile=${TARGETS[1]} bfile=${TARGETS[2]} read=d |
             put o2=0.0 d2=0.00625 label2=Distance unit2=km
                 o1=0.0 d1=0.00625 label1=Depth unit1=km
                 label= unit= |
             smooth rect1=%(smz)d rect2=%(smz)d repeat=2 |
             window j1=2 j2=2
             ''' % par)

Flow('vx',['vp','epsilon'],'''
     math epsilon=${SOURCES[1]} output="input*sqrt(1.0 + 2.0*epsilon)"
     ''')
Flow('eta',['epsilon','delta'],'''
     math delta=${SOURCES[1]} output="(input - delta)/(1.0 + 2.0*delta)"
     ''')
Flow('vspl',['vp','vx','theta','eta'],'''
     bspvel2 vx=${SOURCES[1]} theta=${SOURCES[2]} eta=${SOURCES[3]}
             verb=y
     ''')

# Escape tables with ray tracing in reduced phase space
###############

Flow('bpttinesc',['vp','vspl'],'''
     escrt2 verb=y na=%(na)d vspl=${SOURCES[1]}
     ''' % par, split=[2,par['nx'],[0]], reduce='cat axis=4')


# Angle migration
###############

# Read SEG-Y common-shot gathers
data = []
for i in range(4):
    src = 'Anisotropic_FD_Model_Shots_part%d.sgy' % (i + 1)
#    Fetch(src,'BP',top=os.environ.get('DATAPATH'),server='local')
    md5 = 'Anisotropic_FD_Model_Shots_part%d.md5' % (i + 1)
    dat = 'data%d' % (i + 1)
    tdat = 'tdata%d' % (i + 1)
    data.append (dat)
# Offset axis
    n2 = 800
# Shot axis
    n3 = 500
    o3 = 25.0*float(i)
    if i == 3:
        n3 = 140
    Flow([dat, tdat],[src, md5],'''
         segyread tape=${SOURCES[0]} tfile=${TARGETS[1]} |
         put o2=-10.025 d2=0.0125 n2=%d
             o3=%g d3=0.05 n3=%d
             label3=Shot unit3=km
             label2=Offset unit2=km
             label1=Time unit1=s > ${TARGETS[0]} &&
         md5sum --status -c ${SOURCES[1]}
         ''' % (n2,o3,n3), stdin=0, stdout=0)
# Combine into one input dataset for migration,
# shift to zero-offset, adjust for the source and receiver depths
Flow('data',data,'''
     cat axis=3 space=n ${SOURCES[1:%d]} |
     halfint inv=y adj=n | put o1=-0.05 |
     pcrdata2 absoff=n KMAH=y filter=y verb=y
     ''' % len(data))

# Migration

omigs = []
dmigs = []
oills = []
dills = []
osmbs = []

# Parts (number of samples in x axis)
# total sum should be = par['nx']
pn = [1600, 1600, 1600, 1298]
f = 0

# Break migration into separate pieces for better load balancing
for p in range(len(pn)):
    escpart = 'nesc%d' % p
    ocram = 'bpttiocram%d' % p
    dcram = 'bpttidcram%d' % p
    oill  = 'bpttioill%d'  % p
    dill  = 'bpttidill%d'  % p
    osmb  = 'bpttiosmb%d'  % p
    omigs.append (ocram)
    dmigs.append (dcram)
    oills.append (oill)
    dills.append (dill)
    osmbs.append (osmb)
    # Extract escape values according to our new locations
    Flow(escpart,'bpttinesc','window f4=%d n4=%d' % (f, pn[p]))
    # Run migration for this extracted piece
    Flow([ocram,dcram,oill,dill,osmb],[escpart,'data','vp'],'''
         cram2 data=${SOURCES[1]} vz=${SOURCES[2]}
               mute=y oazmin=%(oazmin)g oazmax=%(oazmax)g
                      dazmin=%(dazmin)g dazmax=%(dazmax)g
               ts=%(ts)d th=%(th)d smax=%(smax)g hmax=%(hmax)g
               dipagath=${TARGETS[1]}
               imap=${TARGETS[2]} dipimap=${TARGETS[3]}
               smap=${TARGETS[4]}
         ''' % par, split=[4,pn[p],[0]], reduce='cat axis=3')
    f = f + pn[p]


# Concatenate pieces together
Flow('bpttiocram',omigs,'''
     cat axis=3 space=n ${SOURCES[1:%d]}
     ''' % len(omigs))
Flow('bpttidcram',dmigs,'''
     cat axis=3 space=n ${SOURCES[1:%d]}
     ''' % len(dmigs))
Flow('bpttioill',oills,'''
     cat axis=3 space=n ${SOURCES[1:%d]}
     ''' % len(oills))
Flow('bpttidill',dills,'''
     cat axis=3 space=n ${SOURCES[1:%d]}
     ''' % len(dills))
Flow('bpttiosmb',osmbs,'''
     cat axis=3 space=n ${SOURCES[1:%d]}
     ''' % len(osmbs))

# Stack full image
Flow('bpttiocrstk','bpttiocram','stack axis=1 norm=n')
Flow('bpttidcrstk','bpttidcram','stack axis=1 norm=n')

# Plotting
###############

f = 0
for i in range(len(pn)):
    if i < 3:
        axis1 = ' o1num=%g d1num=2.0 n1tic=10' % (par['ox'] + f*par['dx'] + 1.0)
    else:
        axis1 = ' o1num=%g d1num=2.0 n1tic=8' % (par['ox'] + f*par['dx'] + 1.0)
    Result('bpttidcrstk%d' % i,'bpttidcram%d' % i,'''
           stack axis=1 |
           grey title= wantitle=n pclip=99.6 scalebar=n 
           ''' + par['scrpar'] + axis1)
    f = f + pn[i]

# Image gathers
cigs = [10,20,30,40,50,60,70]
for i in range(len(cigs)):
    ocig = 'bptttiocig%d' % i
    dcig = 'bptttidcig%d' % i
    Result(ocig,'bpttiocram','''
           window sfwindow min3=%g max3=%g j1=2 | transp |
           wiggle pclip=99.8 zplot=1.2 label2="\F10 g \F-1 " %s
           ''' % (cigs[i],cigs[i],par['scrpar2']))
    Result(dcig,'bpttidcram','''
           window sfwindow min3=%g max3=%g j1=6 | transp |
           wiggle pclip=99.8 zplot=1.2 label2="\F10 v \F-1 " %s
           ''' % (cigs[i],cigs[i],par['scrpar2']))

End()

