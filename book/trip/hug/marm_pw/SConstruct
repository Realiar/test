#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from batch import getFlowSignature
from batch import getThreads
import os
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################
penv = {'stampede' :  { 'batch' : 'slurm',
                        'queue' : 'normal',
                        'acct'  : 'FDTD3D-Cont',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/sbatch',
			'local' : '', 
                        'suffix': 'bat', },
         'davinci' :  { 'batch' : 'pbs',
                        'queue' : 'trip',
                        'acct'  : 'symes',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/qsub',
			'local' : '',
                        'suffix': 'pbs', },
       }
######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
suplane         = os.path.join(CWPROOT,'bin/suplane')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sunull          = os.path.join(CWPROOT,'bin/sunull')
suop2           = os.path.join(CWPROOT,'bin/suop2')
suspike         = os.path.join(CWPROOT,'bin/suspike')
sufilter        = os.path.join(CWPROOT,'bin/sufilter')
suwind          = os.path.join(CWPROOT,'bin/suwind')
RSFSRC          = os.getenv('RSFSRC')
acd             = os.path.join(RSFSRC,'trip/iwave/acd/main/acd.x')
acdcgne         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcgne.x')
acdfwi          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdfwi.x')
acdadjtest      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdadjtest.x')
planewave       = os.path.join(RSFSRC,'trip/iwave/trace/main/planewave.x')

fetches = {
#    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
#    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

# new diml consts
N1 = 141
D  = 24
N2 = 444
NX = 241
OX = 3000 
F2 = 383
NPW= 31
DP = 0.2
NT = 501
NTP= 101
DT = 0.004
SCALCO = 1000

Flow('ocean',None,'makevel n1=' + str(N1) + ' d1=' + str(D) + ' n2=' + str(N2) + ' d2=' + str(D) + ' o1=0 o2=0 v000=1.5 | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m/ms esize=4',stdin=0) 
Flow('vel24base','velocity.HH','dd form=native | window j1=6 j2=6')
Flow('vext','vel24base','window f2=' + str(F2) + ' n2=1 | spray axis=2 d=' + str(D) + ' n=60')
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=' + str(D) + ' ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=15 f1=0 | cat axis=1 d=' + str(D) + ' ${SOURCES[1]}') 
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')

Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=10')

Flow('csq24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csqbig80pct',['csq24big.rsf', 'csq24noah.rsf'], 
     'add < ${SOURCES[0]} ${SOURCES[1]} scale=0.8,0.2 > ${TARGETS[0]}')
Flow('csqbig80pct_ext','csqbig80pct', 
     'spray < ${SOURCES[0]} axis=3 n=60 d=1.0 o=0.0| ' +
     'put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '> ${TARGETS[0]}')


Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < csq24.rsf csq24sm2.rsf |window min1=180| sfpad beg1=8') 
Flow('csqext.rsf','csq24sm.rsf', 'sfcat csq24sm.rsf csq24sm.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)
Flow('dcsqext.rsf','dcsq24.rsf', 'sfcat dcsq24.rsf dcsq24.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)

# plane wave data
Flow('wavelet_base.su', None, suspike + ' nt=101 ntr=1 offset=0 ix1=1 nspk=1 it1=50 dt=0.004 | ' + sufilter + ' f=2,5,15,20 | ' + sushw + ' key=delrt a=-200 ', stdin=0)

#Flow('hdr1p.su', None, sunull + ' nt=' + str(NT) + ' ntr=' + str(NX) + ' dt=' + str(DT) + '| ' + sushw + ' #key=sx a=0| ' + sushw + ' key=selev a=-12 |' + sushw + ' key=gx a=' + str(OX) + ' b=' + str(D) + ' j=' + st#r(NX) + '| ' + sushw + ' key=gelev a=-8'  +  ' | ' + sushw + ' key=delrt a=0 > ${TARGETS[0]}', stdin=0, std#out=-1)

#Flow('wav1p.su', ['wavelet_base.su'], suplane + ' nt=' + str(NTP) + ' ntr=' + str(N2) + ' npl=1 dip1=0.0 le#n1=' + str(N2) + ' dt=' + str(DT) + '| ' + sushw + ' key=sx a=0| ' + sushw + ' key=selev a=-12 |' + sushw +#' key=gx a=0 b=' + str(D) + ' j=' + str(N2) + '| ' + sushw + ' key=gelev a=-12| ' + sushw + ' key=offset a=#0 |' + sushw + ' key=delrt a=-200 | ' + suconv + ' sufile=${SOURCES[0]} | ' + suwind + ' itmin=51 itmax=151# > ${TARGETS[0]}', stdin=0, stdout=-1)

Flow(['hdr1p.su','wav1p.su'],['wavelet_base.su'],
    planewave + ' CWPROOT=' + CWPROOT + ' src=${SOURCES[0]}' +
    ' pwhdr=${TARGETS[0]}' + ' pwsrc=${TARGETS[1]}' +
    ' nt=' + str(NT) + ' ot=0 nx=' + str(NX) + ' dx=' + str(D) + ' ox=' + str(OX) + ' zs=12 zr=12' +
    ' np=1 dp=0.2 op=0 ots=-200 nxs=444 nts=' + str(NTP) + ' oxs=0 dxs=' + str(D),
    stdin=0, stdout=-1)
# pre-cooked exes
exe_serial  = {}
exe_getafix = {'platf':'mpi', 'ppn':'16'}
exe_davinci_small = {'platf':'davinci', 'nodes':'1', 'ppn': '16', 'wall': '00:10:00'}
exe_stampede_4hr = {'platf':'stampede','nodes':'2','ppn':'16','wall':'04:00:00'}
exe_stampede_10min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:10:00'}
exe_stampede_30min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:30:00'}
# choose

# movie-src output file
Flow('movie1p','wav1p.su csq24',
     '''
     makevel n1=141 n2=444 n3=51 d1=24 d2=24 d3=25 v000=0  | 
     put id1=0 id2=1 id3=2 dim=2 gdim=3 > ${TARGETS[0]} &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 movie=${TARGETS[0]}
     ''',stdin=0,stdout=-1,workdir='movie1p.work')

# trace-src output file
Flow('shot1p.su','wav1p.su csq24 hdr1p.su',
     '''
     /bin/cp ${SOURCES[2]} $TARGET &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 data=$TARGET
     ''',stdin=0,stdout=-1,workdir='shot1p.work')

# born simulation
Flow('born1p.su', ['hdr1p.su', 'wav1p.su', 'csq24big.rsf', 'dcsq24.rsf'],
     '''
     /bin/cp ${SOURCES[0]} ${TARGETS[0]} &&
     acd deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 
     csq=${SOURCES[2]} csq_d1=${SOURCES[3]} source=${SOURCES[1]}
     data=${TARGETS[0]}
     ''',stdin=0,stdout=-1,workdir='born1p.work')

Flow('mig1p.rsf', ['born1p.su', 'wav1p.su', 'csq24big.rsf'],
     '''
     add scale=0.0 < ${SOURCES[2]} > ${TARGETS[0]} &&
     acd deriv=1 adjoint=1 order=2 cfl=0.5
     cmin=1.0 cmax=6.0 sampord=1 nsnaps=20
     csq=${SOURCES[2]} csq_b1=${TARGETS[0]}
     source=${SOURCES[1]}
     data=${SOURCES[0]}
     ''', stdin=0, stdout=-1, workdir='mig1p.work')

# Born/CG inversion - one shot, mute
Flow(['icsq1p.rsf', 'icsq1p_est.su', 'icsq1p_res.su'], 
     ['born1p.su', 'wav1p.su', 'csq24big.rsf','csq24.rsf'],
     '''
     sfmath < ${SOURCES[3]} > ${TARGETS[0]} output=0 && %s
     order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
     csq=${SOURCES[3]} rcsq=${SOURCES[2]}
     icsq=${TARGETS[0]} source=${SOURCES[1]} 
     data=${SOURCES[0]} outfile=cgne.out 
     ResidualTol = 0.01 GradientTol = 0.01
     MaxIter = 20 dataest=${TARGETS[1]} datares=${TARGETS[2]}
     ''' % acdcgne,stdin=0,stdout=0, workdir='icsq1p.work')

# trace-src output file homog
Flow('shot1pnoah.su','wav1p.su csq24noah hdr1p.su',
     '''
     /bin/cp ${SOURCES[2]} $TARGET &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 dump_term=1 sampord=1 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 data=$TARGET
     ''',stdin=0,stdout=-1,workdir='shot1pnoah.work')

Flow(['diff.su'],['shot1p.su', 'shot1pnoah.su'],
     suop2 + ' ${SOURCES[0]} ${SOURCES[1]} op=diff > ${TARGETS[0]}',
     stdin=0, stdout=-1)

Flow(['mig_shot1p.rsf'], ['diff.su', 'wav1p.su', 'csq24noah.rsf'],
     '''
     add scale=0.0 < ${SOURCES[2]} > ${TARGETS[0]} &&
     acd deriv=1 adjoint=1 order=2 cfl=0.5
     cmin=1.0 cmax=6.0 sampord=1 nsnaps=20
     csq=${SOURCES[2]} csq_b1=${TARGETS[0]}
     source=${SOURCES[1]}
     data=${SOURCES[0]}
     ''', stdin=0, stdout=-1, workdir='mig_shot1p.work')

# OLS
Flow(['ols'],['shot1p.su', 'wav1p.su', 'csq24noah'],
        'add < ../csq24noah.rsf > ../ols.rsf scale=1.0 && ' +  
	acdfwi + ' ' +
	'''
	order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
	source=${SOURCES[1]} dump_pars=1
	csq=${SOURCES[2]} init_csq=${SOURCES[2]} final_csq=${TARGETS[0]}
	data=${SOURCES[0]} datamut=mute.su
	dataest=est.su datares=res.su
	mute_slope=0.0 mute_zotime=300 mute_width=200 mute_type=0
	MaxLBFGSIter=20 MaxLineSrchSteps=10 LSDoubleFac=1.8 ''',
	stdin=0,stdout=-1,workdir='ols.work')

End()
