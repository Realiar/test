from rsf.proj import *
from math import pi
from rsf.recipes.beg import server as private

Fetch('sean.HH','bp')
def grey3(title):
    return '''
    put o3=0 |
    byte allpos=n clip=622.105 |
    grey3 title="%s" label2=Trace label1="Time" unit1=s label3=Shot
    point1=0.8 point2=0.7 frame1=250 frame2=50 frame3=10
    parallel2=n o2num=2 d2num=1 n2tic=2 screenratio=1.3
    font=2 labelfat=2 titlefat=2 color=n
    ''' % title
Flow('sean3','sean.HH',
     'dd form=native | bandpass fhi=50')
Plot('sean3',grey3('Original'))
Result('sean3',grey3('Original'))

# Mask for random traces
Flow('mask1','sean3',
     '''
     window n1=1 |
     noise rep=y type=n seed=2008 |
     math output="input^1" |
     mask min=-0.0
     ''')
Result('mask',
     '''
     dd type=float |
     grey transp=n yreverse=n scalebar=y
     label1="In-line midpoint" label2="Cross-line midpoint"
     wheretitle=t wherexlabel=b title="Mask Map"
     ''')

# Zero out random traces
Flow('zero3','sean3 mask1','headercut mask=${SOURCES[1]}')
Plot('zero3',grey3('Missing 50% traces'))
Result('zero3',grey3('Missing 50% traces'))
Flow('mask','mask1','dd type=float')


# use sffpocs3d/sfpocs3d here!
# frequency domain inversion is much faster, computation saving!
Flow('rec','zero3 mask',
     '''
     sffpocs3d mask=${SOURCES[1]} niter=100 verb=y normp=0.4 pclip=3
     ''')


Plot('rec',grey3('Reconstructed'))
Result('rec',grey3('Reconstructed'))

Flow('err','sean3 rec',
    '''
    add ${SOURCES[1]} scale=-1,1
    ''')
Plot('err',grey3('Error panel'))
Result('err',grey3('Error panel'))

Result('combined','sean3 zero3 rec err','TwoColumns')

End()
