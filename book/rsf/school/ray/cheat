from rsf.proj import *

def Draw(rsffile,extra=''):
    Plot(rsffile,'grey color=j scalebar=y barreverse=y allpos=y %s' % extra)

# create a model
################
z = 3    # depth of model
v0 = 1   # velocity at origin
gz = 2   # velocity gradient in z
gx = 0.5 # velocity gradient in x

amp = 1  # amplitude of Gaussian anomaly
rad = 1  # radius of Gaussian anomaly

Flow('model',None,
     '''
     math n1=%d d1=0.01 o1=0 n2=1001 d2=0.01 o2=0 output="%g+%g*x1+%g*x2" |
     math output="input+%g*exp(-((x1-%g)*(x1-%g)+(x2-5)*(x2-5))/(%g*%g))" |
     put label1=Depth unit1=km label2=Position unit2=km
     ''' % (z/0.01+1,v0,gz,gx,amp,z/2,z/2,rad,rad))

# plot the model
################
Draw('model','title=Model barlabel=Velocity barunit=km/s')

# ray-tracing
#############
Flow('yshot',None,'math n1=3 d1=2.5 o1=2.5 output=x1')
Flow('zshot','yshot','math output=0.')
Flow('shots','zshot yshot','cat axis=2 ${SOURCES[1]} | transp')

Flow('ray','model shots','rays2 nt=500 dt=0.001 a0=160 amax=200 nr=10 shotfile=${SOURCES[1]}')

# plot the ray (overlay model)
##############################
for n in range (3):
    Plot('ray'+str(n),'ray',
         '''
         window n3=1 f3=%d |
         graph transp=y yreverse=y scalebar=y plotcol=7 plotfat=3
         wantaxis=n wanttitle=n min1=0 max1=%g min2=0 max2=10
         ''' % (n,z))

    Plot('overlay'+str(n),['model','ray'+str(n)],'Overlay')

# final figure
##############
Result('figure','overlay0 overlay1 overlay2','OverUnderAniso')

End()
