from rsf.suproj import *
from rsf.prog import RSFROOT

# We make some simple data: 8 traces with 2-way reverberations and
# a weak tilting reflector hidden underneath the reverberations.  The
# spike data is convolved with the minimum phase wavelet specified below.
# Then a tiny bit of noise is added--tiny because: (1) the definition
# of signal to noise is stringent--based on the biggest amplitude
# on the trace and (2) these are single traces, usually you'd have
# a cmp gather and the ultimate goal of stacking to combat noise.

# In this demo, we do spiking decon first and then do gapped decon
# (prediction error filtering).  You are to assume that the decon
# parameters are estimated from the autocorrelation shown in frame two.

# Construction of the minimum phase wavelet with Mathematica:
# (2-z)(3+z)(3-2z)(4+z)(4-2z)(4+3z)//(CoefficientList[#,z])&
#     {1152, -384, -904, 288, 174, -34, -12}

# First make the synthetic data for the deconvolution demo

traces = os.path.join(RSFROOT,'bin','sftraces')

Command('traces.bin',traces,'$SOURCE --out=$TARGET >/dev/null')
Flow('modeldata','traces.bin',
     '''
     suaddhead ns=512 |
     sushw key=dt a=4000 |
     suaddnoise sn=200 |
     suconv filter=1152,-384,-904,288,174,-34,-12 
     ''')

def wigb(title,windowtitle):
    return '''
    suxwigb title="%s" windowtitle="%s" 
    label1="Time (s)" label2="Trace" 
    wbox=420 hbox=400 
    ''' % (title,windowtitle)

# Plot the model 
Result('modeldata',wigb('Data: 64ms reverbs','Data'))

tpow=1 # gain power before examining autocorrelations
# tpow=2 might be better for field data
 
# Plot the autocorrelation with gain
autocorr = 'sugain tpow=%d | suacor ntout=61 | ' % tpow

Result('autocorr','modeldata',
       autocorr + wigb('Autocorrelation','AutoCorr'))

# The autocorrelation shows that:
#       wavelet extends to about 30ms
#	first repetition ends at about 160ms
# this accords well with the actual 64ms reverberations and wavelet of 24ms

######DECON EXAMPLES######
# First, spike it up

Flow('spiky','modeldata','supef maxlag=.04')
Result('spiky',wigb('Spiking Decon: 4,40ms','Spike'))

# Plot the autocorrelation after spike
Result('autospiky','spiky',
       autocorr + wigb('Autocor after Spike','AutoCorr/Spike'))

# Second, go after the reverberations:  note reflector!

Flow('reverb','spiky','supef minlag=.05 maxlag=.16')
Result('reverb',wigb('PEF: 50,160ms (Note dipping reflector!)','PEF'))

# Bandpass
Flow('band','reverb','sufilter f=5,15,80,100')
Result('band',wigb('Spike, PEF, BandPass','Final'))

End()
